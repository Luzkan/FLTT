
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULTIPLYDIVIDEleftPOWERDIVIDE EQUALS FLOAT INT MINUS MODULO MULTIPLY NAME PLUS POWER\n    calc : expression\n         | var_assign\n         | empty\n    \n    var_assign : NAME expression EQUALS\n               | NAME NAME EQUALS\n    \n    expression : expression expression POWER\n               | expression expression MODULO\n               | expression expression MULTIPLY\n               | expression expression DIVIDE\n               | expression expression PLUS\n               | expression expression MINUS\n    \n    expression : INT\n               | FLOAT\n    \n    expression : NAME\n    \n    empty : \n    '
    
_lr_action_items = {'INT':([0,2,5,6,7,8,9,10,11,12,13,14,15,16,17,],[5,5,-12,-13,5,5,-14,-14,5,-6,-7,-8,-9,-10,-11,]),'FLOAT':([0,2,5,6,7,8,9,10,11,12,13,14,15,16,17,],[6,6,-12,-13,6,6,-14,-14,6,-6,-7,-8,-9,-10,-11,]),'NAME':([0,2,5,6,7,8,9,10,11,12,13,14,15,16,17,],[7,9,-12,-13,10,9,-14,-14,9,-6,-7,-8,-9,-10,-11,]),'$end':([0,1,2,3,4,5,6,7,12,13,14,15,16,17,18,19,],[-15,0,-1,-2,-3,-12,-13,-14,-6,-7,-8,-9,-10,-11,-5,-4,]),'POWER':([5,6,8,9,12,13,14,15,16,17,],[-12,-13,12,-14,-6,-7,-8,-9,-10,-11,]),'MODULO':([5,6,8,9,12,13,14,15,16,17,],[-12,-13,13,-14,-6,-7,-8,-9,-10,-11,]),'MULTIPLY':([5,6,8,9,12,13,14,15,16,17,],[-12,-13,14,-14,-6,-7,-8,-9,-10,-11,]),'DIVIDE':([5,6,8,9,12,13,14,15,16,17,],[-12,-13,15,-14,-6,-7,-8,-9,-10,-11,]),'PLUS':([5,6,8,9,12,13,14,15,16,17,],[-12,-13,16,-14,-6,-7,-8,-9,-10,-11,]),'MINUS':([5,6,8,9,12,13,14,15,16,17,],[-12,-13,17,-14,-6,-7,-8,-9,-10,-11,]),'EQUALS':([5,6,10,11,12,13,14,15,16,17,],[-12,-13,18,19,-6,-7,-8,-9,-10,-11,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'calc':([0,],[1,]),'expression':([0,2,7,8,11,],[2,8,11,8,8,]),'var_assign':([0,],[3,]),'empty':([0,],[4,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> calc","S'",1,None,None,None),
  ('calc -> expression','calc',1,'p_calc','main.py',99),
  ('calc -> var_assign','calc',1,'p_calc','main.py',100),
  ('calc -> empty','calc',1,'p_calc','main.py',101),
  ('var_assign -> NAME expression EQUALS','var_assign',3,'p_var_assign','main.py',108),
  ('var_assign -> NAME NAME EQUALS','var_assign',3,'p_var_assign','main.py',109),
  ('expression -> expression expression POWER','expression',3,'p_expression','main.py',117),
  ('expression -> expression expression MODULO','expression',3,'p_expression','main.py',118),
  ('expression -> expression expression MULTIPLY','expression',3,'p_expression','main.py',119),
  ('expression -> expression expression DIVIDE','expression',3,'p_expression','main.py',120),
  ('expression -> expression expression PLUS','expression',3,'p_expression','main.py',121),
  ('expression -> expression expression MINUS','expression',3,'p_expression','main.py',122),
  ('expression -> INT','expression',1,'p_expression_int_float','main.py',129),
  ('expression -> FLOAT','expression',1,'p_expression_int_float','main.py',130),
  ('expression -> NAME','expression',1,'p_expression_var','main.py',136),
  ('empty -> <empty>','empty',0,'p_empty','main.py',148),
]
