Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> CHAR
Rule 2     expression -> SPACE
Rule 3     expression -> NEWLINE
Rule 4     expression -> expression expression

Terminals, with rules where they appear

CHAR                 : 1
NEWLINE              : 3
SPACE                : 2
error                : 

Nonterminals, with rules where they appear

expression           : 4 4 0

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . CHAR
    (2) expression -> . SPACE
    (3) expression -> . NEWLINE
    (4) expression -> . expression expression

    CHAR            shift and go to state 2
    SPACE           shift and go to state 3
    NEWLINE         shift and go to state 4

    expression                     shift and go to state 1

state 1

    (0) S' -> expression .
    (4) expression -> expression . expression
    (1) expression -> . CHAR
    (2) expression -> . SPACE
    (3) expression -> . NEWLINE
    (4) expression -> . expression expression

    CHAR            shift and go to state 2
    SPACE           shift and go to state 3
    NEWLINE         shift and go to state 4

    expression                     shift and go to state 5

state 2

    (1) expression -> CHAR .

    CHAR            reduce using rule 1 (expression -> CHAR .)
    SPACE           reduce using rule 1 (expression -> CHAR .)
    NEWLINE         reduce using rule 1 (expression -> CHAR .)
    $end            reduce using rule 1 (expression -> CHAR .)


state 3

    (2) expression -> SPACE .

    CHAR            reduce using rule 2 (expression -> SPACE .)
    SPACE           reduce using rule 2 (expression -> SPACE .)
    NEWLINE         reduce using rule 2 (expression -> SPACE .)
    $end            reduce using rule 2 (expression -> SPACE .)


state 4

    (3) expression -> NEWLINE .

    CHAR            reduce using rule 3 (expression -> NEWLINE .)
    SPACE           reduce using rule 3 (expression -> NEWLINE .)
    NEWLINE         reduce using rule 3 (expression -> NEWLINE .)
    $end            reduce using rule 3 (expression -> NEWLINE .)


state 5

    (4) expression -> expression expression .
    (4) expression -> expression . expression
    (1) expression -> . CHAR
    (2) expression -> . SPACE
    (3) expression -> . NEWLINE
    (4) expression -> . expression expression

  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for SPACE resolved as shift
  ! shift/reduce conflict for NEWLINE resolved as shift
    $end            reduce using rule 4 (expression -> expression expression .)
    CHAR            shift and go to state 2
    SPACE           shift and go to state 3
    NEWLINE         shift and go to state 4

  ! CHAR            [ reduce using rule 4 (expression -> expression expression .) ]
  ! SPACE           [ reduce using rule 4 (expression -> expression expression .) ]
  ! NEWLINE         [ reduce using rule 4 (expression -> expression expression .) ]

    expression                     shift and go to state 5
WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for CHAR in state 5 resolved as shift
WARNING: shift/reduce conflict for SPACE in state 5 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 5 resolved as shift
